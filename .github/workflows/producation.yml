name: Production CI/CD Pipeline
on:
 push:
  branches:
   - main
 pull_request:
  branches:
   - main

env:
 IMAGE_TAG: latest
 VERSION: ${{ github.ref_name }}
 BUILD_TIMESTAMP: ${{ github.event.timestamp }}
 DOCKER_REGISTRY: ghcr.io
 DOCKER_IMAGE_NAME: ${{ github.repository }}

permissions:
 contents: write
 packages: write
 pages: write
 id-token: write
 pull-requests: write

jobs:
 label-pr:
  if: github.event_name == 'pull_request'
  runs-on: ubuntu-latest
  permissions:
    contents: write
  steps:
   - uses: actions/checkout@v4
   - uses: actions/labeler@v5
     with:
      repo-token: ${{ secrets.PULL_REQEST }}
      configuration-path: .github/labeler.yml
 prepare:
  runs-on: ubuntu-latest
  outputs:
   node_modules_cache: ${{ steps.set-cache-output.outputs.cache-hit }}
  steps:
   - uses: actions/checkout@v4
   - name: Cache node modules
     id: cache-node-modules
     uses: actions/cache@v4
     with:
      path: |
       node_modules
       .npm
      key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      restore-keys: ${{ runner.os }}-node-
   - name: Install dependencies
     run: npm ci
   - name: Set cache output
     id: set-cache-output
     run: echo "cache-hit=$(ls node_modules | wc -l | tr -d ' ')" >> $GITHUB_OUTPUT

 lint:
  needs: prepare
  runs-on: ubuntu-latest
  steps:
   - uses: actions/checkout@v4
   - name: Restore cache
     uses: actions/cache@v4
     with:
      path: |
       node_modules
       .npm
      key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
   - name: Typecheck
     run: npx tsc --noEmit

 test:
  needs: prepare
  runs-on: ubuntu-latest
  steps:
   - uses: actions/checkout@v4
   - name: Restore cache
     uses: actions/cache@v4
     with:
      path: |
       node_modules
       .npm
      key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
   - name: Run tests with coverage
     run: |
      npx jest --coverage --json --outputFile=test-results.json
   - name: Upload test results
     uses: actions/upload-artifact@v4
     with:
      name: test-results
      path: |
       test-results.json
       coverage

 quality-assurance:
  needs: prepare
  runs-on: ubuntu-latest
  steps:
   - name: Checkout code
     uses: actions/checkout@v4
   - name: Set up Node.js
     uses: actions/setup-node@v4
     with:
      node-version: 20
   - name: Install dependencies
     run: npm ci
   - name: Run npm audit
     run: npm audit --audit-level=moderate

 build-prod:
  needs: [lint, test]
  runs-on: ubuntu-latest
  steps:
   - uses: actions/checkout@v4
   - name: Restore cache
     uses: actions/cache@v4
     with:
      path: |
       node_modules
       .npm
      key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
   - name: Download test results
     uses: actions/download-artifact@v4
     with:
      name: test-results
      path: test-results
   - name: Build application
     run: |
      npm run build
      npx typedoc
      npx jest
     env:
      NODE_ENV: production
      GOTIFY_PORT: 9094
   - name: Upload artifacts
     uses: actions/upload-artifact@v4
     with:
      name: dist-prod
      path: |
       dist
       node_modules

 docker-prod:
  if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  needs: build-prod
  runs-on: ubuntu-latest
  permissions:
   packages: write
   contents: read
  steps:
   - uses: actions/checkout@v4
   - name: Download artifacts
     uses: actions/download-artifact@v4
     with:
      name: dist-prod
      path: .
   - name: Cache Docker layers
     uses: actions/cache@v4
     with:
      path: /tmp/.buildx-cache
      key: ${{ runner.os }}-buildx-${{ github.sha }}
      restore-keys: |
       ${{ runner.os }}-buildx-
   - name: Set up Docker Buildx
     uses: docker/setup-buildx-action@v3
   - name: Log in to GitHub Container Registry
     uses: docker/login-action@v3
     with:
      registry: ghcr.io
      username: ${{ github.actor }}
      password: ${{ secrets.GITHUB_TOKEN }}
   - name: Extract metadata
     id: meta
     uses: docker/metadata-action@v5
     with:
      images: ghcr.io/${{ github.repository_owner }}/alertmanager-gotify
      tags: |
       type=raw,value=latest
       type=raw,value=${{ env.IMAGE_TAG }}
   - name: Build and push Docker image
     uses: docker/build-push-action@v6
     with:
      context: .
      file: .github/Dockerfile
      push: true
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      cache-from: type=local,src=/tmp/.buildx-cache
      cache-to: type=local,dest=/tmp/.buildx-cache-new
      build-args: |
       NODE_ENV=production
       VERSION=${{ env.VERSION }}
       BUILD_TIMESTAMP=${{ env.BUILD_TIMESTAMP }}
       GITHUB_REPO=${{ github.repository }}
       GITHUB_OWNER=${{ github.repository_owner }}
       GITHUB_WORKFLOW_NAME=${{ github.workflow }}
       GITHUB_PULL_REQUEST_NUMBER=${{ github.event.pull_request.number }}
       GITHUB_REF_TYPE=${{ github.ref_type }}
       GITHUB_REF_NAME=${{ github.ref_name }}
       GITHUB_RUN_NUMBER=${{ github.run_number }}
       GITHUB_RUN_ID=${{ github.run_id }}
       GITHUB_RUN_ATTEMPT=${{ github.run_attempt }}
       GITHUB_ACTOR=${{ github.actor }}
       GITHUB_SHA=${{ github.sha }}
   - name: Move cache
     run: |
      rm -rf /tmp/.buildx-cache
      mv /tmp/.buildx-cache-new /tmp/.buildx-cache

 deploy-docs:
  needs: build-prod
  if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  runs-on: ubuntu-latest
  permissions:
   pages: write
   id-token: write
  environment:
   name: github-pages
   url: ${{ steps.deployment.outputs.page_url }}
  steps:
   - uses: actions/checkout@v4
   - name: Download artifacts
     uses: actions/download-artifact@v4
     with:
      name: dist-prod
      path: .
   - name: Verify artifact structure
     run: |
      echo "Checking documentation structure..."
      if [ -d "dist/docs" ]; then
        echo "Found docs directory:"
        ls -la dist/docs
      else
        echo "ERROR: Documentation not found in dist/docs"
        exit 1
      fi
   - name: Prepare deployment
     run: |
      rm -rf deploy-docs
      mkdir -p deploy-docs/coverage
      cp -r dist/docs/. deploy-docs/
      cp -r dist/coverage/. deploy-docs/coverage/
      touch deploy-docs/.nojekyll
      echo "Final deployment structure:"
      ls -la deploy-docs/
   - name: Setup Pages
     uses: actions/configure-pages@v5
   - name: Upload artifact
     uses: actions/upload-pages-artifact@v3
     with:
      path: "deploy-docs"
      retention-days: 1
   - name: Deploy to GitHub Pages
     id: deployment
     uses: actions/deploy-pages@v4

 release:
  if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  needs:
   - docker-prod
   - deploy-docs
   - build-prod
  runs-on: ubuntu-latest
  permissions:
   contents: write
  steps:
   - name: Checkout code
     uses: actions/checkout@v4
     with:
      fetch-depth: 0
   - name: Get version from package.json
     id: version
     run: |
      echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
   - name: Create Release
     uses: softprops/action-gh-release@v2
     with:
      tag_name: v${{ steps.version.outputs.version }}
      name: Release v${{ steps.version.outputs.version }}
      body: |
       - Production release
       - Docker image pushed to GHCR
       - Documentation deployed to GitHub Pages
       - Contributors updated
       - Changelog generated
       See [CHANGELOG.md](CHANGELOG.md) for details
      draft: false
      prerelease: false
      files: |
       dist/**/*
       package.json
       CHANGELOG.md
       CONTRIBUTORS.md
   - name: Update README with workflow badge
     run: |
      sed -i "s|\[!\[CI/CD Pipeline\].*|\[!\[CI/CD Pipeline\](https://github.com/${{ github.repository }}/workflows/Production%20CI\/CD%20Pipeline/badge.svg)](https://github.com/${{ github.repository }}/actions/workflows/prod.yml)|" README.md
      git add README.md
      git commit -m "docs: update workflow status badge [skip ci]" || echo "No badge changes"
      git push || echo "Nothing to push"
